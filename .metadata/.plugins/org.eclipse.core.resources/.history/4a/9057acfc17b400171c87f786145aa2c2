package it.dstech.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import it.dstech.models.Cellulare;


@RestController
@RequestMapping("/cellulare")
public class CellulareController {
	
	@Autowired
	private CellulareService cellulareService;
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@GetMapping("/getmodel")
	public ResponseEntity<Cellulare> getmodel() {
		Cellulare prodott = new Cellulare();
		return new ResponseEntity<Cellulare>(prodott, HttpStatus.CREATED);
	}

	
	@PostMapping("/saveupdate")
	public ResponseEntity<Cellulare> saveOrUpdateCellulare(@RequestBody Cellulare cellulare) {
		try {
			Cellulare saved = cellulareService.saveOrUpdateCellulare(cellulare);
			logger.info(saved + " saved");
			return new ResponseEntity<Cellulare>(saved, HttpStatus.CREATED);
		} catch (Exception e) {
			logger.error("Errore " + e);
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/findbyid/{id}")
	public ResponseEntity<Cellulare> findById(@PathVariable int id) {
		try {
			Cellulare find = cellulareService.findById(id);
			logger.info(find + " founded");
			if(find!=null)
			return new ResponseEntity<Cellulare>(find, HttpStatus.OK);
			else
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		} catch (Exception e) {
			logger.error("Errore  " + e);
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/findbycodice/{codice}")
	public ResponseEntity<Cellulare> getByCodice(@PathVariable int codice) {
		try {
			Cellulare find = cellulareService.findByCodice(codice);
			logger.info(find + " founded");
			if(find!=null)
			return new ResponseEntity<Cellulare>(find, HttpStatus.OK);
			else
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		} catch (Exception e) {
			logger.error("Errore  " + e);
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/findAll")
	public ResponseEntity<List<Cellulare>> findAll() {
		try {
			List<Cellulare> find = cellulareService.findAll();
			logger.info(find + " founded");
			if(find!=null)
			return new ResponseEntity<List<Cellulare>>(find, HttpStatus.OK);
			else
			return new ResponseEntity<List<Cellulare>>(HttpStatus.INTERNAL_SERVER_ERROR);
		} catch (Exception e) {
			logger.error("Errore " + e);
			return new ResponseEntity<List<Cellulare>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@RequestMapping("/delete/{id}")
	public ResponseEntity<Cellulare> deleteCellulare(@PathVariable("id") int id) {
		try {
			cellulareService.deleteCellulare(id);
			logger.info(id + " deleted");
			return new ResponseEntity<Cellulare>(HttpStatus.OK);
		} catch (Exception e) {
			logger.error("Errore " + e);
			return new ResponseEntity<Cellulare>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
